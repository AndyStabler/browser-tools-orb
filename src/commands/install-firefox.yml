description: >
  Install Mozilla's Firefox browser, for use in browser testing. Requires
  apt-get, gpg, curl, sha256sum, tar, jq

parameters:
  version:
    type: string
    default: latest
    description: >
      Version of Firefox to install, defaults to the latest stable release.
      To install an older release, specify a full semantic version number,
      e.g., 66.0.3, 53.0, etc. Note: version-selection is not supported for
      Alpine Linux-based execution environments, as Mozilla's Firefox
      binaries are not compiled to run on Alpine. Use the `alpine-version`
      parameter to select from a limited number of Alpine-based
      Firefox packages. Otherwise, for a full list of releases, see the
      following: https://archive.mozilla.org/pub/firefox/releases/

  alpine-version:
    type: enum
    default: stable
    enum: [stable, esr]
    description: >
      For Alpine Linux users, select a Firefox version: either the latest
      stable release, or the latest Extended Support Release. For more
      information, see https://mozilla.org/firefox/organizations and
      https://pkgs.alpinelinux.org/packages?name=firefox*

  install-dir:
    type: string
    default: /usr/local/bin
    description: >
      Directory in which to install Firefox. Note: directory-
      selection is not supported for Alpine Linux-based execution
      environments.

steps:
  - run:
      name: Install Firefox
      command: |
        if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

        # FUNCTIONS
        grab_firefox_version () {
          if [[ <<parameters.version>> == "latest" ]]; then
            # extract latest version from mozilla product details API

            FIREFOX_VERSION_STRING=$(curl \
              https://product-details.mozilla.org/1.0/firefox_versions.json | \
              jq '.LATEST_FIREFOX_VERSION')

            # strip leading/trailing "
            temp="${FIREFOX_VERSION_STRING%\"}"
            FIREFOX_VERSION="${temp#\"}"
            echo "Latest stable version of Firefox is $FIREFOX_VERSION"
          else
            FIREFOX_VERSION=<<parameters.version>>
            echo "Selected version of Firefox is $FIREFOX_VERSION"
          fi

          # create Firefox download URL base
          FIREFOX_URL_BASE="https://archive.mozilla.org/pub/firefox/releases/$FIREFOX_VERSION"
        }

        installation_check () {
          if command -v firefox >> /dev/null 2>&1; then
            if firefox --version | grep "$FIREFOX_VERSION" >> /dev/null 2>&1; then
              echo "firefox $FIREFOX_VERSION is already installed"
              exit 0
            else
              echo "A different version of Firefox is installed ($(firefox --version)); removing it"
              $SUDO rm -f $(command -v firefox)
            fi
          fi
        }

        # mac: setup version, install packages, then continue
        if uname -a | grep Darwin >> /dev/null 2>&1; then
          grab_firefox_version
          installation_check

          HOMEBREW_NO_AUTO_UPDATE=1 brew install gnupg coreutils

        # alpine: install everything, then check version & halt
        elif cat /etc/issue | grep Alpine >> /dev/null 2>&1; then
          if [[ <<parameters.alpine-version>> == "stable" ]]; then
            FIREFOX_PKG=firefox
          elif [[ <<parameters.alpine-version>> == "esr" ]]; then
            FIREFOX_PKG=firefox-esr
          fi

          $SUDO apk add --no-cache -q gtk+3.0-dev dbus-glib-dev libc6-compat libstdc++ libgcc libbsd-dev "$FIREFOX_PKG"

          echo "$(firefox --version) has been installed to $(which firefox)"

          circleci step halt

          # perl gnupg glib pango xorg-server dbus networkmanager

          # add glibc compatibility layer
          # curl --output /etc/apk/keys/sgerrand.rsa.pub \
          #  --silent --show-error --location --fail --retry 3 \
          #  https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub

          # GLIBC_URL_STRING=$(curl \
          #  --silent --show-error --location --fail --retry 3 \
          #  https://api.github.com/repos/sgerrand/alpine-pkg-glibc/releases/latest | jq '.assets[3].browser_download_url')

          # strip leading/trailing "
          # curl --output glibc.apk \
          #  --silent --show-error --location --fail --retry 3 \
          #  "${GLIBC_URL_STRING:1:-1}"

          # $SUDO apk add glibc.apk && rm -f glibc.apk

        # deb/ubuntu: setup version, install packages, then continue
        else
          grab_firefox_version
          installation_check

          $SUDO apt-get update && \
            $SUDO apt-get install -y libgtk-3-dev libdbus-glib-1-2
        fi

        # import public key
        curl --silent --show-error --location --fail --retry 3 "$FIREFOX_URL_BASE/KEY" | gpg --import

        # download shasum256
        curl -O --silent --show-error --location --fail --retry 3 "$FIREFOX_URL_BASE/SHA256SUMS.asc"
        curl -O --silent --show-error --location --fail --retry 3 "$FIREFOX_URL_BASE/SHA256SUMS"

        # verify shasum256
        gpg --verify SHA256SUMS.asc SHA256SUMS
        rm -f SHA256SUMS.asc

        # setup firefox download
        if uname -a | grep Darwin >> /dev/null 2>&1; then
          FIREFOX_FILE="Firefox%20$FIREFOX_VERSION"
          PLATFORM=mac
          FILE_EXT=dmg
        else
          FIREFOX_FILE="firefox-$FIREFOX_VERSION"
          PLATFORM=linux-x86_64
          FILE_EXT=tar.bz2
        fi

        FIREFOX_FILE_LOCATION="$PLATFORM/en-US/$FIREFOX_FILE"

        FIREFOX_FILE_NAME="$PLATFORM-en-US-$FIREFOX_FILE"

        # download firefox
        curl --silent --show-error --location --fail --retry 3 \
          --output "$FIREFOX_FILE_NAME.$FILE_EXT" \
          "$FIREFOX_URL_BASE/$FIREFOX_FILE_LOCATION.$FILE_EXT"

        if uname -a | grep Darwin >> /dev/null 2>&1; then
          echo "no PGP data for macOS Firefox releases"

          perl -i -pe "s%mac/en-US/Firefox%mac-en-US-Firefox%g" SHA256SUMS
        else
          # only do this step if .asc file exists for this version
          if [[ $(curl --silent --location --fail --retry 3 \
            "$FIREFOX_URL_BASE/$FIREFOX_FILE_LOCATION.$FILE_EXT.asc") ]]; then

            curl --silent --show-error --location --fail --retry 3 \
              --output "$FIREFOX_FILE_NAME.$FILE_EXT.asc" \
              "$FIREFOX_URL_BASE/$FIREFOX_FILE_LOCATION.$FILE_EXT.asc"

            # verify download archive
            gpg --verify "$FIREFOX_FILE_NAME.$FILE_EXT.asc" "$FIREFOX_FILE_NAME.$FILE_EXT"
            rm -f "$FIREFOX_FILE_NAME.$FILE_EXT.asc"
          fi

          perl -i -pe "s%linux-x86_64/en-US/firefox%linux-x86_64-en-US-firefox%g" SHA256SUMS
        fi

        grep "$FIREFOX_FILE_NAME.$FILE_EXT" SHA256SUMS | sha256sum -c -
        rm -f SHA256SUMS

        # setup firefox installation
        if uname -a | grep Darwin >> /dev/null 2>&1; then
          hdiutil attach "$FIREFOX_FILE_NAME.$FILE_EXT"
        else
          $SUDO tar -xjf "$FIREFOX_FILE_NAME.$FILE_EXT"
          $SUDO rm -f "$FIREFOX_FILE_NAME.$FILE_EXT"
          $SUDO mv firefox "<<parameters.install-dir>>/firefox-$FIREFOX_VERSION"
          $SUDO chmod +x "<<parameters.install-dir>>/firefox-$FIREFOX_VERSION/firefox"
          $SUDO ln -s "<<parameters.install-dir>>/firefox-$FIREFOX_VERSION/firefox" /usr/local/bin/firefox
        fi

        # verify version
        echo "$(firefox --version) has been installed to $(which firefox)"
